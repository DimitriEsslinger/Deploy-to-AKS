
trigger: none
#- main

resources:
- repo: self

variables:
  imageRepo: sampleapp
  tag: '$(Build.BuildId)'
  poolName: linux-pool

stages:
- stage: Infra
  displayName: Deploy Infra
  jobs:
  - job: Infra
    displayName: Deploy Infra
    pool: 
      name: $(poolName)
    steps:
      - task: 

- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: $(poolName)
    steps:
    - task: Docker@2
      displayName: Build an image and push it to ACR
      inputs:
        containerRegistry: 'acr-connection'
        repository: '$(imageRepo)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/app/Dockerfile'
        tags: |
          $(tag)
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/kubernetes'
        artifact: 'manifests'
        publishLocation: 'pipeline'

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  variables:
    acrsecret: k8sexampleacrauth
    acrdevurl: 'testacrxx1.azurecr.io'
    replicaNo: 3
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    environment: 'k8sdev.default'
    pool: $(poolName)  
    strategy:
      runOnce:
        deploy:     
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'manifests'
              targetPath: '$(Pipeline.Workspace)/manifests'
          - task: KubernetesManifest@0
            displayName: Create secret
            inputs:
              action: 'createSecret'
              secretType: 'dockerRegistry'
              secretName: '$(acrsecret)'
              dockerRegistryEndpoint: 'acr-connection'
              namespace: 'default'
          - task: replacetokens@5
            inputs:
              rootDirectory: '$(Pipeline.Workspace)/manifests/'
              targetFiles: 'deployment.yml'
              encoding: 'auto'
              tokenPattern: 'doublebraces'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              actionOnNoFiles: 'continue'
              enableTransforms: false
              enableRecursion: false
              useLegacyPattern: false
              enableTelemetry: true
          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              namespace: 'default'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: '$(acrdevurl)/$(imageRepo):$(tag)'

